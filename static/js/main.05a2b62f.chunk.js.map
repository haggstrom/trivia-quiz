{"version":3,"sources":["components/Answer.js","components/Answers.js","components/NextButton.js","components/TextPanel.js","reducers/QuizReducer.js","contexts/QuizContext.js","components/Questions.js","components/AnsweredQuestion.js","components/Score.js","components/Quiz.js","util/triviaApiUtil.js","components/CardPanel.js","reducers/quizConfigReducer.js","contexts/QuizConfigContext.js","components/StartScreen/FormSelect.js","components/StartScreen/QuizConfigForm.js","components/StartScreen/StartScreen.js","components/TriviaQuiz.js","App.js","serviceWorker.js","index.js"],"names":["Answer","answer","isSelected","onClick","Col","xs","Button","className","style","marginTop","variant","size","block","Answers","answers","selectedAnswer","onAnswerClick","Row","map","index","key","NextButton","text","disabled","showLoaderOnClick","useState","showLoader","setShowLoader","Spinner","animation","TextPanel","header","metaText","Card","Body","Title","Text","QuizReducer","state","action","type","userAnswers","questions","question","questionNumber","currentAnswer","QuizContext","createContext","QuizContextProvider","props","useReducer","quizData","dispatch","Provider","value","children","Questions","onQuizDone","setCurrentAnswer","useContext","category","difficulty","randomAnswers","length","AnsweredQuestion","userAnswer","correct_answer","ListGroup","Item","Score","onRestart","numQuestions","correctAnswers","reduce","sum","Quiz","showQuestions","setShowQuestions","triviaApiUtil","buildUrl","quizConfig","categoryParameter","difficultyParameter","parseQuestions","rawQuestions","rawQuestion","ReactHtmlParser","incorrect_answers","ic_answer","o","j","x","i","parseInt","Math","random","shuffle","CardPanel","QUIZ_CONFIG_DEFAULT","QuizConfigReducer","QuizConfigContext","QuizConfigContextProvider","configDispatch","FormSelect","id","label","onChange","defaultValue","options","Form","Group","controlId","Label","Control","as","option","QuizConfigForm","e","target","StartScreen","onStartQuiz","sm","href","title","rel","TriviaQuiz","isLoading","setIsLoading","showStartScreen","setShowStartScreen","Container","Jumbotron","url","fetch","then","res","json","result","error","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gNAqBeA,EAjBA,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QACpC,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACC,EAAA,EAAD,CACEC,UAAWL,EAAa,SAAW,GACnCM,MAAO,CAAEC,UAAW,QACpBC,QAAsB,gBACtBC,KAAK,KACLR,QAASA,EACTS,OAAK,GAEJX,KCOMY,EAlBC,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,cAE1C,OACE,kBAACC,EAAA,EAAD,KACGH,EAAQI,KAAI,SAACjB,EAAQkB,GACpB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLlB,OAAQA,EACRC,WAAYa,IAAmBd,EAC/BE,QAAS,kBAAMa,EAAcf,W,QCoB1BoB,EA9BI,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMnB,EAA2C,EAA3CA,QAASoB,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,kBAAwB,EACjCC,oBAAS,GADwB,mBAC9DC,EAD8D,KAClDC,EADkD,KAUrE,OACE,kBAACrB,EAAA,EAAD,CACEE,MAAO,CAAEC,UAAW,QACpBC,QAAQ,QACRC,KAAK,KACLR,QAZkB,WAChBqB,GACFG,GAAc,GAEhBxB,KASES,OAAK,EACLW,SAAUA,IAAY,GAErBG,EACC,yBAAKnB,UAAU,eACb,kBAACqB,EAAA,EAAD,CAASC,UAAU,YAGrBP,I,OCHOQ,EApBG,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQT,EAAqB,EAArBA,KAAMU,EAAe,EAAfA,SACjC,OACE,kBAACf,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC4B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,KAAaJ,GACb,kBAACE,EAAA,EAAKG,KAAN,KAAYd,GACXU,GACC,kBAACC,EAAA,EAAKG,KAAN,KACE,2BAAO7B,UAAU,cAAjB,aAAyCyB,S,eCU1CK,EAzBK,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,gBACH,MAAO,CACLC,YAAa,GACbC,UAAWH,EAAOG,UAClBC,SAAUJ,EAAOG,UAAU,GAC3BE,eAAgB,GAEpB,IAAK,gBACH,OAAO,2BACFN,GADL,IAEEK,SAAUL,EAAMI,UAAUJ,EAAMM,gBAChCA,eAAgBN,EAAMM,eAAiB,IAE3C,IAAK,qBACH,OAAO,2BACFN,GADL,IAEEG,YAAY,GAAD,mBAAMH,EAAMG,aAAZ,CAAyBF,EAAOM,kBAE/C,QACE,OAAOP,IClBPQ,EAAcC,0BAEdC,EAAsB,SAACC,GAAW,IAAD,EACRC,qBAAWb,EAAa,IADhB,mBAC9Bc,EAD8B,KACpBC,EADoB,KAGrC,OACE,kBAACN,EAAYO,SAAb,CAAsBC,MAAO,CAAEH,SAAUA,EAAUC,SAAUA,IAC1DH,EAAMM,WAKET,ICmCAU,EA5CG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACMhC,mBAAS,IADf,mBAC7BoB,EAD6B,KACda,EADc,OAELC,qBAAWb,GAAlCK,EAF4B,EAE5BA,SAAUC,EAFkB,EAElBA,SAFkB,EAGsBD,EAASR,SAA3DA,EAH4B,EAG5BA,SAAUiB,EAHkB,EAGlBA,SAAUC,EAHQ,EAGRA,WAAYC,EAHJ,EAGIA,cAChClB,EAA8BO,EAA9BP,eAAgBF,EAAcS,EAAdT,UAmBxB,OACE,6BACE,kBAAC,EAAD,CACEX,OAAM,oBAAYa,EAAZ,eAAiCF,EAAUqB,OAA3C,KACNzC,KAAMqB,EACNX,SAAQ,UAAK4B,EAAL,cAAmBC,KAE7B,kBAAC,EAAD,CACE9C,eAAgB8B,EAChB7B,cAbgB,SAACf,GACrByD,EAAiBzD,IAaba,QAASgD,IAEX,kBAAC,EAAD,CACExC,KAAK,oBACLnB,QA/BiB,WACC,KAAlB0C,IACFO,EAAS,CAAEZ,KAAM,qBAAsBK,cAAeA,IACtDa,EAAiB,IAEbd,IAAmBF,EAAUqB,OAC/BN,IAEAL,EAAS,CAAEZ,KAAM,oBAwBjBjB,SAA4B,KAAlBsB,M,QChCHmB,EATU,SAAC,GAA8C,IAA5CpB,EAA2C,EAA3CA,eAAgBD,EAA2B,EAA3BA,SACpCjC,EAD+D,EAAjBuD,aACrBtB,EAASuB,eAAiB,UAAY,SACrE,OACE,kBAACC,EAAA,EAAUC,KAAX,CAAgBhD,IAAKwB,EAAgBlC,QAASA,GAC3CkC,EADH,KACqBD,EAASA,SAD9B,YACiDA,EAASuB,iBC8B/CG,EA9BD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACPnB,EAAaQ,qBAAWb,GAAxBK,SACAT,EAA2BS,EAA3BT,UAAWD,EAAgBU,EAAhBV,YACb8B,EAAe7B,EAAUqB,OACzBS,EAAiB/B,EAAYgC,QAAO,SAACC,EAAKzE,EAAQkB,GACtD,OAAOlB,IAAWyC,EAAUvB,GAAO+C,eAAiBQ,EAAM,EAAIA,IAC7D,GAEH,OACE,6BACE,kBAAC,EAAD,CACE3C,OAAO,WACPT,KAAI,UAAKkD,EAAL,eAA0BD,EAA1B,cAEN,kBAACJ,EAAA,EAAD,CAAW3D,MAAO,CAAEC,UAAW,SAC5BiC,EAAUxB,KAAI,SAACyB,EAAUxB,GAAX,OACb,kBAAC,EAAD,CACEC,IAAKD,EACLyB,eAAgBzB,EAAQ,EACxBwB,SAAUD,EAAUvB,GACpB8C,WAAYxB,EAAYtB,SAK9B,kBAAC,EAAD,CAAYG,KAAK,YAAYnB,QAASmE,MCV7BK,EAlBF,SAAC,GAAmB,IAAjBL,EAAgB,EAAhBA,UAAgB,EACY7C,oBAAS,GADrB,mBACvBmD,EADuB,KACRC,EADQ,KAO9B,OACE,oCACGD,EACC,kBAAC,EAAD,CAAWnB,WAPE,WACjBoB,GAAiB,MAQb,kBAAC,EAAD,CAAOP,UAAWA,M,iCCoCXQ,EAlDO,CACpBC,SAAU,SAACC,GACT,IAAMC,EACoB,QAAxBD,EAAWpB,SAAqB,GAAK,aAAeoB,EAAWpB,SAE3DsB,EACsB,QAA1BF,EAAWnB,WACP,GACA,eAAiBmB,EAAWnB,WAElC,MACE,6CAAsCmB,EAAWT,aAAjD,kBACAU,EACAC,GAIJC,eAAgB,SAACzC,GACf,IAAM0C,EAAe1C,EAAS,QA4B9B,OAjBqB0C,EAAalE,KAAI,SAACmE,GACrC,IAAI1C,EAAW2C,IAAgBD,EAAY1C,UAAU,GACjDiB,EAAW0B,IAAgBD,EAAYzB,UAAU,GACjDC,EAAayB,IAAgBD,EAAYxB,YAAY,GACrDK,EAAiBoB,IAAgBD,EAAYnB,gBAAgB,GAC7DqB,EAAoBF,EAAYE,kBAAkBrE,KAAI,SAACsE,GACzD,OAAOF,IAAgBE,GAAW,MAGpC,MAAO,CACL7C,SAAUA,EACViB,SAAUA,EACVC,WAAYA,EACZK,eAAgBA,EAChBJ,cAvBY,SAAC2B,GACf,IACE,IAAIC,EAAGC,EAAGC,EAAIH,EAAE1B,OAChB6B,EACAF,EAAIG,SAASC,KAAKC,SAAWH,GAAID,EAAIF,IAAIG,GAAIH,EAAEG,GAAKH,EAAEC,GAAID,EAAEC,GAAKC,GAEnE,OAAOF,EAWaO,CAAQ,GAAD,mBAAKT,GAAL,CAAwBrB,WCvB1C+B,EAZG,SAAC,GAAkB,IAAhB1C,EAAe,EAAfA,SACnB,OACE,kBAACtC,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC4B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KAAYqB,O,QCThB2C,EAAsB,CAC1B3B,aAAc,IACdX,SAAU,MACVC,WAAY,UAkBCsC,EAfW,SAAC7D,EAAOC,GAChC,OAAQA,EAAOC,MACb,IAAK,0BACH,OAAO,2BAAKF,GAAZ,IAAmBiC,aAAchC,EAAOgC,eAC1C,IAAK,eACH,OAAO,2BAAKjC,GAAZ,IAAmBsB,SAAUrB,EAAOqB,WACtC,IAAK,iBACH,OAAO,2BAAKtB,GAAZ,IAAmBuB,WAAYtB,EAAOsB,aACxC,IAAK,eACH,OAAOqC,EACT,QACE,OAAO5D,ICdP8D,EAAoBrD,0BAEpBsD,EAA4B,SAACpD,GAAW,IAAD,EAEZC,qBAAWiD,EAAmBD,GAFlB,mBAEpClB,EAFoC,KAExB5B,EAFwB,KAI3C,OACE,kBAACgD,EAAkB/C,SAAnB,CACEC,MAAO,CAAE0B,WAAYA,EAAYsB,eAAgBlD,IAEhDH,EAAMM,WAKE6C,ICCAG,EAhBI,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QACvD,OACE,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAWP,GACrB,kBAACK,EAAA,EAAKG,MAAN,KAAaP,GACb,kBAACI,EAAA,EAAKI,QAAN,CAAcC,GAAG,SAASR,SAAUA,EAAUC,aAAcA,GACzDC,EAAQ1F,KAAI,SAACiG,EAAQhG,GACpB,OACE,4BAAQC,IAAKD,EAAOmC,MAAO6D,EAAO7D,OAC/B6D,EAAO7F,YCmFP8F,EAzFQ,WAAO,IAAD,EACYzD,qBAAWyC,GAA1CpB,EADmB,EACnBA,WAAYsB,EADO,EACPA,eA6DpB,OACE,kBAACO,EAAA,EAAD,KACE,kBAAC,EAAD,CACEL,GAAG,oBACHC,MAAM,kBACNC,SAjBwB,SAACW,GAC7Bf,EAAe,CAAE9D,KAAM,0BAA2B+B,aAAc8C,EAAEC,OAAOhE,SAiBrEqD,aAAc3B,EAAWT,aACzBqC,QA3De,CACnB,CAAEtD,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,IAAKhC,KAAM,KACpB,CAAEgC,MAAO,KAAMhC,KAAM,SAmDnB,kBAAC,EAAD,CACEkF,GAAG,gBACHC,MAAM,mBACNC,SApBmB,SAACW,GACxBf,EAAe,CAAE9D,KAAM,eAAgBoB,SAAUyD,EAAEC,OAAOhE,SAoBtDqD,aAAc3B,EAAWpB,SACzBgD,QAtDa,CACjB,CAAEtD,MAAO,MAAOhC,KAAM,gBACtB,CAAEgC,MAAO,IAAKhC,KAAM,qBACpB,CAAEgC,MAAO,KAAMhC,KAAM,wBACrB,CAAEgC,MAAO,KAAMhC,KAAM,uBACrB,CAAEgC,MAAO,KAAMhC,KAAM,wBACrB,CAAEgC,MAAO,KAAMhC,KAAM,sCACrB,CAAEgC,MAAO,KAAMhC,KAAM,6BACrB,CAAEgC,MAAO,KAAMhC,KAAM,8BACrB,CAAEgC,MAAO,KAAMhC,KAAM,8BACrB,CAAEgC,MAAO,KAAMhC,KAAM,oBACrB,CAAEgC,MAAO,KAAMhC,KAAM,sBACrB,CAAEgC,MAAO,KAAMhC,KAAM,wBACrB,CAAEgC,MAAO,KAAMhC,KAAM,aACrB,CAAEgC,MAAO,KAAMhC,KAAM,UACrB,CAAEgC,MAAO,KAAMhC,KAAM,aACrB,CAAEgC,MAAO,KAAMhC,KAAM,WACrB,CAAEgC,MAAO,KAAMhC,KAAM,YACrB,CAAEgC,MAAO,KAAMhC,KAAM,OACrB,CAAEgC,MAAO,KAAMhC,KAAM,eACrB,CAAEgC,MAAO,KAAMhC,KAAM,WACrB,CAAEgC,MAAO,KAAMhC,KAAM,YACrB,CAAEgC,MAAO,KAAMhC,KAAM,yBACrB,CAAEgC,MAAO,KAAMhC,KAAM,oBACrB,CAAEgC,MAAO,KAAMhC,KAAM,yCACrB,CAAEgC,MAAO,KAAMhC,KAAM,0CA+BnB,kBAAC,EAAD,CACEkF,GAAG,kBACHC,MAAM,4BACNC,SAvBqB,SAACW,GAC1Bf,EAAe,CAAE9D,KAAM,iBAAkBqB,WAAYwD,EAAEC,OAAOhE,SAuB1DqD,aAAc3B,EAAWnB,WACzB+C,QAhFe,CACnB,CAAEtD,MAAO,MAAOhC,KAAM,kBACtB,CAAEgC,MAAO,OAAQhC,KAAM,QACvB,CAAEgC,MAAO,SAAUhC,KAAM,UACzB,CAAEgC,MAAO,OAAQhC,KAAM,a,kBCkDZiG,EAtDK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OACE,oCACE,kBAAC,EAAD,KACE,kBAACvG,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAKC,GAAI,EAAGoH,GAAI,GACd,kBAACxF,EAAA,EAAKE,MAAN,qBAEF,kBAAC/B,EAAA,EAAD,CAAKC,GAAI,EAAGoH,GAAI,GACd,kBAACxF,EAAA,EAAKG,KAAN,CAAW7B,UAAU,eACnB,uBACEmH,KAAK,gCACLC,MAAM,sCACNC,IAAI,sBACJN,OAAO,UAEP,kBAAC,IAAD,OAEF,uBACEI,KAAK,gDACLC,MAAM,wCACNC,IAAI,sBACJN,OAAO,UAEP,kBAAC,IAAD,UAMR,kBAAC,EAAD,MACA,kBAACrF,EAAA,EAAKG,KAAN,KACE,2BAAO7B,UAAU,cAAjB,oBACc,IACZ,uBACEmH,KAAK,qCACLC,MAAM,aACNC,IAAI,sBACJN,OAAO,UAJT,iBAWN,kBAAC,EAAD,CACEhG,KAAK,aACLnB,QAASqH,EACThG,mBAAmB,MCAZqG,EA9CI,WAAO,IAAD,EACgBlE,qBAAWyC,GAA1CpB,EADe,EACfA,WAAYsB,EADG,EACHA,eACZlD,EAAaO,qBAAWb,GAAxBM,SAFe,EAGW3B,oBAAS,GAHpB,mBAGhBqG,EAHgB,KAGLC,EAHK,OAIuBtG,oBAAS,GAJhC,mBAIhBuG,EAJgB,KAICC,EAJD,KA6BvB,OACE,kBAACC,EAAA,EAAD,CAAW3H,UAAU,oBACnB,kBAACU,EAAA,EAAD,CAAKV,UAAU,4BACb,yBAAKA,UAAU,eACb,kBAAC4H,EAAA,EAAD,CAAW5H,UAAU,wBAClByH,GAAmBF,EAClB,kBAAC,EAAD,CAAaN,YAxBL,WAClB,IAAIY,EAAMtD,EAAcC,SAASC,GACjC+C,GAAa,GACbM,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,IAAI/F,EAAYoC,EAAcK,eAAesD,GAC7CrF,EAAS,CAAEZ,KAAM,gBAAiBE,UAAWA,IAC7CqF,GAAa,GACbE,GAAmB,MAErB,SAACS,GACCC,QAAQC,IAAI,QAAUF,SAalB,kBAAC,EAAD,CAAMpE,UA/BA,WAChBgC,EAAe,CAAE9D,KAAM,iBACvByF,GAAmB,WCARY,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLC,QAAQD,MAAMA,EAAMoB,a","file":"static/js/main.05a2b62f.chunk.js","sourcesContent":["import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Answer = ({ answer, isSelected, onClick }) => {\n  return (\n    <Col xs={12}>\n      <Button\n        className={isSelected ? \"active\" : \"\"}\n        style={{ marginTop: \"10px\" }}\n        variant={isSelected ? \"outline-light\" : \"outline-light\"}\n        size=\"lg\"\n        onClick={onClick}\n        block\n      >\n        {answer}\n      </Button>\n    </Col>\n  );\n};\n\nexport default Answer;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Answer from \"./Answer\";\n\nconst Answers = ({ answers, selectedAnswer, onAnswerClick }) => {\n\n  return (\n    <Row>\n      {answers.map((answer, index) => {\n        return (\n          <Answer\n            key={index}\n            answer={answer}\n            isSelected={selectedAnswer === answer}\n            onClick={() => onAnswerClick(answer)}\n          />\n        );\n      })}\n    </Row>\n  );\n};\n\nexport default Answers;\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst NextButton = ({ text, onClick, disabled, showLoaderOnClick }) => {\n  const [showLoader, setShowLoader] = useState(false);\n\n  const onButtonClick = () => {\n    if (showLoaderOnClick || false) {\n      setShowLoader(true);\n    }\n    onClick();\n  };\n\n  return (\n    <Button\n      style={{ marginTop: \"10px\" }}\n      variant=\"light\"\n      size=\"lg\"\n      onClick={onButtonClick}\n      block\n      disabled={disabled || false}\n    >\n      {showLoader ? (\n        <div className=\"text-center\">\n          <Spinner animation=\"border\" />\n        </div>\n      ) : (\n        text\n      )}\n    </Button>\n  );\n};\n\nexport default NextButton;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\n\nconst TextPanel = ({ header, text, metaText }) => {\n  return (\n    <Row>\n      <Col xs={12}>\n        <Card>\n          <Card.Body>\n            <Card.Title>{header}</Card.Title>\n            <Card.Text>{text}</Card.Text>\n            {metaText && (\n              <Card.Text>\n                <small className=\"text-muted\">Kategori: {metaText}</small>\n              </Card.Text>\n            )}\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default TextPanel;\n","const QuizReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_QUESTIONS\":\n      return {\n        userAnswers: [],\n        questions: action.questions,\n        question: action.questions[0],\n        questionNumber: 1,\n      };\n    case \"NEXT_QUESTION\":\n      return {\n        ...state,\n        question: state.questions[state.questionNumber],\n        questionNumber: state.questionNumber + 1,\n      };\n    case \"SET_CURRENT_ANSWER\":\n      return {\n        ...state,\n        userAnswers: [...state.userAnswers, action.currentAnswer],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default QuizReducer;\n","import React, { createContext, useReducer } from \"react\";\nimport QuizReducer from \"../reducers/QuizReducer\";\n\nconst QuizContext = createContext();\n\nconst QuizContextProvider = (props) => {\n  const [quizData, dispatch] = useReducer(QuizReducer, {});\n\n  return (\n    <QuizContext.Provider value={{ quizData: quizData, dispatch: dispatch }}>\n      {props.children}\n    </QuizContext.Provider>\n  );\n};\n\nexport default QuizContext;\nexport { QuizContextProvider };\n","import React, { useState, useContext } from \"react\";\nimport Answers from \"./Answers\";\nimport NextButton from \"./NextButton\";\nimport TextPanel from \"./TextPanel\";\nimport QuizContext from \"../contexts/QuizContext\";\n\nconst Questions = ({ onQuizDone }) => {\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const { quizData, dispatch } = useContext(QuizContext);\n  const { question, category, difficulty, randomAnswers } = quizData.question;\n  const { questionNumber, questions } = quizData;\n\n  const changeQuestion = () => {\n    if (currentAnswer !== \"\") {\n      dispatch({ type: \"SET_CURRENT_ANSWER\", currentAnswer: currentAnswer });\n      setCurrentAnswer(\"\");\n\n      if (questionNumber === questions.length) {\n        onQuizDone();\n      } else {\n        dispatch({ type: \"NEXT_QUESTION\" });\n      }\n    }\n  };\n\n  const onAnswerClick = (answer) => {\n    setCurrentAnswer(answer);\n  };\n\n  return (\n    <div>\n      <TextPanel\n        header={`Fråga (${questionNumber} av ${questions.length})`}\n        text={question}\n        metaText={`${category} - ${difficulty}`}\n      />\n      <Answers\n        selectedAnswer={currentAnswer}\n        onAnswerClick={onAnswerClick}\n        answers={randomAnswers}\n      />\n      <NextButton\n        text=\"Nästa fråga\"\n        onClick={changeQuestion}\n        disabled={currentAnswer === \"\"}\n      />\n    </div>\n  );\n};\n\nexport default Questions;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst AnsweredQuestion = ({ questionNumber, question, userAnswer }) => {\n  const variant = userAnswer === question.correct_answer ? \"success\" : \"danger\";\n  return (\n    <ListGroup.Item key={questionNumber} variant={variant}>\n      {questionNumber}. {question.question} Answer: {question.correct_answer}\n    </ListGroup.Item>\n  );\n};\n\nexport default AnsweredQuestion;\n","import React, { useContext } from \"react\";\nimport NextButton from \"./NextButton\";\nimport TextPanel from \"./TextPanel\";\nimport AnsweredQuestion from \"./AnsweredQuestion\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport QuizContext from \"../contexts/QuizContext\";\n\nconst Score = ({ onRestart }) => {\n  const { quizData } = useContext(QuizContext);\n  const { questions, userAnswers } = quizData;\n  const numQuestions = questions.length;\n  const correctAnswers = userAnswers.reduce((sum, answer, index) => {\n    return answer === questions[index].correct_answer ? sum + 1 : sum;\n  }, 0);\n\n  return (\n    <div>\n      <TextPanel\n        header=\"Resultat\"\n        text={`${correctAnswers} av ${numQuestions} rätt`}\n      />\n      <ListGroup style={{ marginTop: \"10px\" }}>\n        {questions.map((question, index) => (\n          <AnsweredQuestion\n            key={index}\n            questionNumber={index + 1}\n            question={questions[index]}\n            userAnswer={userAnswers[index]}\n          />\n        ))}\n      </ListGroup>\n\n      <NextButton text=\"Nytt Quiz\" onClick={onRestart} />\n    </div>\n  );\n};\n\nexport default Score;\n","import React, { useState } from \"react\";\nimport Questions from \"./Questions\";\nimport Score from \"./Score\";\n\nconst Quiz = ({ onRestart }) => {\n  const [showQuestions, setShowQuestions] = useState(true);\n\n  const onQuizDone = () => {\n    setShowQuestions(false);\n  };\n\n  return (\n    <>\n      {showQuestions ? (\n        <Questions onQuizDone={onQuizDone} />\n      ) : (\n        <Score onRestart={onRestart} />\n      )}\n    </>\n  );\n};\n\nexport default Quiz;\n","import ReactHtmlParser from \"react-html-parser\";\n\nconst triviaApiUtil = {\n  buildUrl: (quizConfig) => {\n    const categoryParameter =\n      quizConfig.category === \"any\" ? \"\" : \"&category=\" + quizConfig.category;\n\n    const difficultyParameter =\n      quizConfig.difficulty === \"any\"\n        ? \"\"\n        : \"&difficulty=\" + quizConfig.difficulty;\n\n    return (\n      `https://opentdb.com/api.php?amount=${quizConfig.numQuestions}&type=multiple` +\n      categoryParameter +\n      difficultyParameter\n    );\n  },\n\n  parseQuestions: (questions) => {\n    const rawQuestions = questions[\"results\"];\n\n    const shuffle = (o) => {\n      for (\n        var j, x, i = o.length;\n        i;\n        j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x\n      );\n      return o;\n    };\n\n    const questionList = rawQuestions.map((rawQuestion) => {\n      let question = ReactHtmlParser(rawQuestion.question)[0];\n      let category = ReactHtmlParser(rawQuestion.category)[0];\n      let difficulty = ReactHtmlParser(rawQuestion.difficulty)[0];\n      let correct_answer = ReactHtmlParser(rawQuestion.correct_answer)[0];\n      let incorrect_answers = rawQuestion.incorrect_answers.map((ic_answer) => {\n        return ReactHtmlParser(ic_answer)[0];\n      });\n      let randomAnswers = shuffle([...incorrect_answers, correct_answer]);\n      return {\n        question: question,\n        category: category,\n        difficulty: difficulty,\n        correct_answer: correct_answer,\n        randomAnswers: randomAnswers,\n      };\n    });\n    return questionList;\n  },\n};\n\nexport default triviaApiUtil;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nconst CardPanel = ({ children }) => {\n  return (\n    <Row>\n      <Col xs={12}>\n        <Card>\n          <Card.Body>{children}</Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default CardPanel;\n","const QUIZ_CONFIG_DEFAULT = {\n  numQuestions: \"3\",\n  category: \"any\",\n  difficulty: \"medium\",\n};\n\nconst QuizConfigReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_NUMBER_OF_QUESTIONS\":\n      return { ...state, numQuestions: action.numQuestions };\n    case \"SET_CATEGORY\":\n      return { ...state, category: action.category };\n    case \"SET_DIFFICULTY\":\n      return { ...state, difficulty: action.difficulty };\n    case \"RESET_CONFIG\":\n      return QUIZ_CONFIG_DEFAULT;\n    default:\n      return state;\n  }\n};\n\nexport default QuizConfigReducer;\nexport { QUIZ_CONFIG_DEFAULT };\n","import React, { createContext, useReducer } from \"react\";\nimport QuizConfigReducer, {QUIZ_CONFIG_DEFAULT} from \"../reducers/quizConfigReducer\";\n\nconst QuizConfigContext = createContext();\n\nconst QuizConfigContextProvider = (props) => {\n\n  const [quizConfig, dispatch] = useReducer(QuizConfigReducer, QUIZ_CONFIG_DEFAULT);\n\n  return (\n    <QuizConfigContext.Provider\n      value={{ quizConfig: quizConfig, configDispatch: dispatch }}\n    >\n      {props.children}\n    </QuizConfigContext.Provider>\n  );\n};\n\nexport default QuizConfigContext;\nexport { QuizConfigContextProvider };\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\n\nconst FormSelect = ({ id, label, onChange, defaultValue, options }) => {\n  return (\n    <Form.Group controlId={id}>\n      <Form.Label>{label}</Form.Label>\n      <Form.Control as=\"select\" onChange={onChange} defaultValue={defaultValue}>\n        {options.map((option, index) => {\n          return (\n            <option key={index} value={option.value}>\n              {option.text}\n            </option>\n          );\n        })}\n      </Form.Control>\n    </Form.Group>\n  );\n};\nexport default FormSelect;\n","import React, { useContext } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport QuizConfigContext from \"../../contexts/QuizConfigContext\";\nimport FormSelect from \"./FormSelect\";\n\nconst QuizConfigForm = () => {\n  const { quizConfig, configDispatch } = useContext(QuizConfigContext);\n\n  const difficulties = [\n    { value: \"any\", text: \"Any Difficulty\" },\n    { value: \"easy\", text: \"Easy\" },\n    { value: \"medium\", text: \"Medium\" },\n    { value: \"hard\", text: \"Hard\" },\n  ];\n\n  const numQuestions = [\n    { value: \"1\", text: \"1\" },\n    { value: \"2\", text: \"2\" },\n    { value: \"3\", text: \"3\" },\n    { value: \"4\", text: \"4\" },\n    { value: \"5\", text: \"5\" },\n    { value: \"6\", text: \"6\" },\n    { value: \"7\", text: \"7\" },\n    { value: \"8\", text: \"8\" },\n    { value: \"9\", text: \"9\" },\n    { value: \"10\", text: \"10\" },\n  ];\n  const categories = [\n    { value: \"any\", text: \"Any Category\" },\n    { value: \"9\", text: \"General Knowledge\" },\n    { value: \"10\", text: \"Entertainment: Books\" },\n    { value: \"11\", text: \"Entertainment: Film\" },\n    { value: \"12\", text: \"Entertainment: Music\" },\n    { value: \"13\", text: \"Entertainment: Musicals & Theatres\" },\n    { value: \"14\", text: \"Entertainment: Television\" },\n    { value: \"15\", text: \"Entertainment: Video Games\" },\n    { value: \"16\", text: \"Entertainment: Board Games\" },\n    { value: \"17\", text: \"Science & Nature\" },\n    { value: \"18\", text: \"Science: Computers\" },\n    { value: \"19\", text: \"Science: Mathematics\" },\n    { value: \"20\", text: \"Mythology\" },\n    { value: \"21\", text: \"Sports\" },\n    { value: \"22\", text: \"Geography\" },\n    { value: \"23\", text: \"History\" },\n    { value: \"24\", text: \"Politics\" },\n    { value: \"25\", text: \"Art\" },\n    { value: \"26\", text: \"Celebrities\" },\n    { value: \"27\", text: \"Animals\" },\n    { value: \"28\", text: \"Vehicles\" },\n    { value: \"29\", text: \"Entertainment: Comics\" },\n    { value: \"30\", text: \"Science: Gadgets\" },\n    { value: \"31\", text: \"Entertainment: Japanese Anime & Manga\" },\n    { value: \"32\", text: \"Entertainment: Cartoon & Animations\" },\n  ];\n\n  const onNumQuestionsChanged = (e) => {\n    configDispatch({ type: \"SET_NUMBER_OF_QUESTIONS\", numQuestions: e.target.value });\n  };\n\n  const onCategoryChange = (e) => {\n    configDispatch({ type: \"SET_CATEGORY\", category: e.target.value });\n  };\n\n  const onDifficultyChange = (e) => {\n    configDispatch({ type: \"SET_DIFFICULTY\", difficulty: e.target.value });\n  };\n\n  return (\n    <Form>\n      <FormSelect\n        id=\"from.NumQuestions\"\n        label=\"Antal Frågor\"\n        onChange={onNumQuestionsChanged}\n        defaultValue={quizConfig.numQuestions}\n        options={numQuestions}\n      />\n      <FormSelect\n        id=\"form.Category\"\n        label=\"Välj kategori\"\n        onChange={onCategoryChange}\n        defaultValue={quizConfig.category}\n        options={categories}\n      />\n      <FormSelect\n        id=\"form.difficulty\"\n        label=\"Välj svårighetsgrad\"\n        onChange={onDifficultyChange}\n        defaultValue={quizConfig.difficulty}\n        options={difficulties}\n      />\n    </Form>\n  );\n};\n\nexport default QuizConfigForm;\n","import React from \"react\";\nimport NextButton from \"../NextButton\";\nimport CardPanel from \"../CardPanel\";\nimport QuizConfigForm from \"./QuizConfigForm\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { GitHub, Linkedin } from \"react-feather\";\nconst StartScreen = ({ onStartQuiz }) => {\n  return (\n    <>\n      <CardPanel>\n        <Row>\n          <Col xs={7} sm={6}>\n            <Card.Title>Trivia Quiz</Card.Title>\n          </Col>\n          <Col xs={5} sm={6}>\n            <Card.Text className=\"author-text\">\n              <a\n                href=\"https://github.com/haggstrom/\"\n                title=\"Anders Häggström på GitHub\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <GitHub />\n              </a>\n              <a\n                href=\"https://www.linkedin.com/in/anders-haggstrom/\"\n                title=\"Anders Häggström på LinkedIn\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <Linkedin />\n              </a>\n            </Card.Text>\n          </Col>\n        </Row>\n\n        <QuizConfigForm />\n        <Card.Text>\n          <small className=\"text-muted\">\n            Frågor från{\" \"}\n            <a\n              href=\"https://opentdb.com/api_config.php\"\n              title=\"Trivia API\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Trivia API\n            </a>\n          </small>\n        </Card.Text>\n      </CardPanel>\n      <NextButton\n        text=\"Start Quiz\"\n        onClick={onStartQuiz}\n        showLoaderOnClick={true}\n      />\n    </>\n  );\n};\n\nexport default StartScreen;\n","import React, { useState, useContext } from \"react\";\nimport Quiz from \"./Quiz\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport triviaApiUtil from \"../util/triviaApiUtil\";\nimport StartScreen from \"./StartScreen/StartScreen\";\nimport QuizConfigContext from \"../contexts/QuizConfigContext\";\nimport QuizContext from \"../contexts/QuizContext\";\n\nconst TriviaQuiz = () => {\n  const { quizConfig, configDispatch } = useContext(QuizConfigContext);\n  const { dispatch } = useContext(QuizContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showStartScreen, setShowStartScreen] = useState(true);\n\n  const onRestart = () => {\n    configDispatch({ type: \"RESET_CONFIG\" });\n    setShowStartScreen(true);\n  };\n\n  const onStartQuiz = () => {\n    let url = triviaApiUtil.buildUrl(quizConfig);\n    setIsLoading(true);\n    fetch(url)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          let questions = triviaApiUtil.parseQuestions(result);\n          dispatch({ type: \"SET_QUESTIONS\", questions: questions });\n          setIsLoading(false);\n          setShowStartScreen(false);\n        },\n        (error) => {\n          console.log(\"error\" + error);\n        }\n      );\n  };\n\n  return (\n    <Container className=\"h-100 bg-primary\">\n      <Row className=\"align-items-center h-100\">\n        <div className=\"fixed-width\">\n          <Jumbotron className=\"bg-primary my-border\">\n            {showStartScreen || isLoading ? (\n              <StartScreen onStartQuiz={onStartQuiz} />\n            ) : (\n              <Quiz onRestart={onRestart} />\n            )}\n          </Jumbotron>\n        </div>\n      </Row>\n    </Container>\n  );\n};\n\nexport default TriviaQuiz;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./css/bootstrap-fresca-theme.min.css\";\n\nimport TriviaQuiz from \"./components/TriviaQuiz\";\nimport { QuizConfigContextProvider } from \"./contexts/QuizConfigContext\";\nimport { QuizContextProvider } from \"./contexts/QuizContext\";\n\nfunction App() {\n  return (\n    <QuizConfigContextProvider>\n      <QuizContextProvider>\n        <TriviaQuiz />\n      </QuizContextProvider>\n    </QuizConfigContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}